# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  city: String
  country: String
  district: String
}

type ControlWhoSeesYou {
  onlyPeopleIveLiked: Boolean!
  standard: Boolean!
}

input ControlWhoSeesYouInput {
  onlyPeopleIveLiked: Boolean
  standard: Boolean
}

type ControlWhoYouSee {
  balancedRecommendations: Boolean!
  recentlyActive: Boolean!
}

input ControlWhoYouSeeInput {
  balancedRecommendations: Boolean
  recentlyActive: Boolean
}

type Conversation {
  _id: ID!
  createdAt: DateTime!
  isDeleted: Boolean!
  lastMessage: Message
  members: [User!]!
  messagePin: Message
  updatedAt: DateTime!
}

type ConversationResult {
  results: [Conversation!]
  totalCount: Float
}

input CreateConversationInput {
  lastMessage: ObjectID
  members: [ObjectID!]
  messagePin: ObjectID
}

input CreateTagInput {
  description: String
  name: String!
  parentType: TagType
  type: TagType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DiscoverySettings {
  distance: Float!
  lookingFor: LookingFor!
  maxAge: Float!
  minAge: Float!
  onlyShowAgeThisRange: Boolean!
  onlyShowDistanceThisRange: Boolean!
}

input DiscoverySettingsInput {
  distance: Float
  lookingFor: LookingFor
  maxAge: Float
  minAge: Float
  onlyShowAgeThisRange: Boolean
  onlyShowDistanceThisRange: Boolean
}

enum FilterByDate {
  LAST_YEAR
  SEVEN_DAYS_AGO
  THIRTY_DAYS_AGO
  THIS_YEAR
}

input FilterGetAllMessage {
  conversion_id: ObjectID
  type: MessageType
}

input FilterGetAllTag {
  name: String
  parentType: TagType
  type: TagType
}

input FilterGetAllUser {
  geoLocation: GeoLocationInput
  isSkipNotLikeUser: Boolean
  matched: [String!]
  mySetting: MySettingInput
  showMeTinder: Boolean
  statusActive: StatusActive
  user_id: ObjectID
}

input FilterGetOnerConversation {
  _id: ObjectID
  members: [ObjectID!]
}

input FilterStatisticUser {
  filterByDate: FilterByDate
  sortOption: SortOption
  username: String
}

enum GenderEnum {
  FEMALE
  MALE
}

type GeoLocation {
  """[lng, lat]"""
  coordinates: [Float!]
  type: String
}

input GeoLocationInput {
  """Position 0 is Longitude , 1 is Latitude"""
  coordinates: [Float!]!
}

type JwtPayload {
  accessToken: String!
  refreshToken: String!
}

input LoginInput {
  email: String!
  password: String!
}

enum LookingFor {
  ALL
  MEN
  WOMEN
}

type MatchRequest {
  createdAt: DateTime
  sender: User
}

type Message {
  _id: ID!
  conversion_id: Conversation!
  createdAt: DateTime!
  cursor: Float!
  isDeleted: Boolean!
  keyword: String!
  receiver: User!
  sender: User!
  text: String
  type: MessageType!
  updatedAt: DateTime!
  urlMessageImage: String
}

type MessageResult {
  results: [Message!]
  totalCount: Float
}

enum MessageType {
  IMAGE
  TEXT
}

type Mutation {
  changePassword(confirmPassword: String!, newPassword: String!, oldPassword: String!): Boolean!
  changeSetting(input: MySettingInput!): Boolean!
  confirmBlockUser(user_id: ObjectID!): Boolean!
  confirmDeleteAccount(code: Float!, email: String!): Boolean!
  createConversation(createConversationInput: CreateConversationInput!): Conversation!
  createTag(createTagInput: CreateTagInput!): Boolean!
  declineBlockUser(user_id: ObjectID!): Boolean!
  likeUser(user_id: ObjectID!): Boolean!
  removeMessage(message_id: ObjectID!): Message!
  reportUser(reasonReport: String!, userReport: ObjectID!): Boolean!
  signIn(input: LoginInput!): JwtPayload!
  signUp(input: RegisterInput!): Boolean!
  skipUser(user_id: ObjectID!): Boolean!
  unSkipUser(user_id: ObjectID!): Boolean!
  unlikeUser(user_id: ObjectID!): Boolean!
  updateProfile(input: UpdateUserInput!): Boolean!
}

type MySetting {
  controlWhoSeesYou: ControlWhoSeesYou!
  controlWhoYouSee: ControlWhoYouSee!
  discovery: DiscoverySettings!
}

input MySettingInput {
  controlWhoSeesYou: ControlWhoSeesYouInput
  controlWhoYouSee: ControlWhoYouSeeInput
  discovery: DiscoverySettingsInput
}

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

input PaginationInput {
  page: Float = 0
  size: Float = 10
}

input PaginationMessageInput {
  cursor: Float
  limit: Float
}

type Query {
  confirmMail(token: String!): Boolean!
  createMultiTag: Boolean!
  createMultiUser: Boolean!
  deleteAccount: Boolean!
  forgotPassword(email: String!): Boolean!
  getAllConversation(pagination: PaginationInput): ConversationResult!
  getAllMessage(filter: FilterGetAllMessage, pagination: PaginationMessageInput): MessageResult!
  getAllReportsUser(pagination: PaginationInput): UserResult!
  getAllTag(filter: FilterGetAllTag, pagination: PaginationInput): TagResult!
  getAllUser(filter: FilterGetAllUser, pagination: PaginationInput): UserResult!
  getCurrentAddress: Address!
  getOneConversation(input: FilterGetOnerConversation): Conversation!
  refreshToken: JwtPayload!
  resetCache: Boolean!
  signInAsAdmin(email: String!, password: String!): JwtPayload!
  statisticUser(filter: FilterStatisticUser, pagination: PaginationInput): UserResult!
}

input RegisterInput {
  confirmPassword: String!
  email: String!
  password: String!
}

type Reports {
  createdAt: DateTime!
  reasonReport: String!
  reportBy: User!
}

enum SortOption {
  AGE
  AZ
  ZA
}

enum StatusActive {
  OFFLINE
  ONLINE
}

type Tag {
  _id: ID!
  createdAt: DateTime!
  description: String
  isDeleted: Boolean!
  keyword: String!
  name: String
  parentType: TagType
  slug: String!
  type: TagType
  updatedAt: DateTime!
}

type TagResult {
  results: [Tag!]
  totalCount: Float
}

enum TagType {
  DIETARY_PREFERENCE
  EDUCATION
  LIFE_STYLE
  PASSIONS
  PERSONALITY_TYPE
  PETS
  SMOKE_QUESTION
  ZODIAC
}

input UpdateUserInput {
  aboutMe: String
  birthDays: DateTime
  company: String
  gender: GenderEnum
  images: [String!]
  jobTitle: String
  liveAt: String
  phoneNumber: String
  school: String
  showMeTinder: Boolean
  tags: [ObjectID!]
  username: String
}

type User {
  _id: ID!
  aboutMe: String
  address: Address
  age: Float
  birthDays: DateTime
  calcDistance: Float
  company: String
  createdAt: DateTime
  email: String!
  gender: GenderEnum
  geoLocation: GeoLocation
  images: [String!]
  isDeleted: Boolean!
  jobTitle: String
  keyword: String
  lastActive: DateTime
  liveAt: String
  matchRequest: [MatchRequest!]
  matched: [User!]
  mySetting: MySetting
  phoneNumber: String
  reports: [Reports!]
  school: String
  showMeTinder: Boolean!
  slug: String
  statusActive: StatusActive
  tags: [Tag!]
  updatedAt: DateTime
  username: String
}

type UserResult {
  results: [User!]
  totalCount: Float
}