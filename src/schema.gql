# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  city: String
  country: String
  district: String
}

type ControlWhoSeesYou {
  onlyPeopleIveLiked: Boolean!
  standard: Boolean!
}

input ControlWhoSeesYouInput {
  onlyPeopleIveLiked: Boolean
  standard: Boolean
}

type ControlWhoYouSee {
  balancedRecommendations: Boolean!
  recentlyActive: Boolean!
}

input ControlWhoYouSeeInput {
  balancedRecommendations: Boolean
  recentlyActive: Boolean
}

type Conversation {
  _id: ID!
  createdAt: DateTime!
  isDeleted: Boolean!
  keyword: String!
  lastMessage: Message
  members: [User!]!
  messagePin: Message
  updatedAt: DateTime!
}

input CreateConversationInput {
  lastMessage: ObjectID
  members: [ObjectID!]
  messagePin: ObjectID
}

input CreateMessageInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateSocketInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateTagInput {
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DiscoverySettings {
  distance: Float!
  lookingFor: LookingFor!
  maxAge: Float!
  minAge: Float!
  onlyShowAgeThisRange: Boolean!
  onlyShowDistanceThisRange: Boolean!
}

input DiscoverySettingsInput {
  distance: Float
  lookingFor: LookingFor
  maxAge: Float
  minAge: Float
  onlyShowAgeThisRange: Boolean
  onlyShowDistanceThisRange: Boolean
}

enum GenderEnum {
  FEMALE
  MALE
}

type GeoLocation {
  """[lng, lat]"""
  coordinates: [Float!]
  type: String
}

input GeoLocationInput {
  coordinates: [Float!]!
}

type JwtPayload {
  accessToken: String!
  refreshToken: String!
}

input LoginInput {
  email: String!
  geoLocation: GeoLocationInput!
  password: String!
}

enum LookingFor {
  ALL
  MEN
  WOMEN
}

type MatchRequest {
  createdAt: DateTime
  senderId: User
}

type Message {
  _id: ID!
  conversion_id: Conversation!
  createdAt: DateTime!
  isDeleted: Boolean!
  keyword: String!
  receiver: User!
  sender: User!
  text: String
  type: MessageType!
  updatedAt: DateTime!
  urlMessageImage: String
}

enum MessageType {
  IMAGE
  TEXT
}

type Mutation {
  changeSetting(input: MySettingInput!): Boolean!
  createConversation(createConversationInput: CreateConversationInput!): Conversation!
  createMessage(createMessageInput: CreateMessageInput!): Message!
  createSocket(createSocketInput: CreateSocketInput!): Socket!
  createTag(createTagInput: CreateTagInput!): Tag!
  removeConversation(id: Int!): Conversation!
  removeMessage(id: Int!): Message!
  removeSocket(id: Int!): Socket!
  removeTag(id: Int!): Tag!
  signIn(input: LoginInput!): JwtPayload!
  signUp(input: RegisterInput!): Boolean!
  updateConversation(updateConversationInput: UpdateConversationInput!): Conversation!
  updateMessage(updateMessageInput: UpdateMessageInput!): Message!
  updateProfile(input: UpdateUserInput!): Boolean!
  updateSocket(updateSocketInput: UpdateSocketInput!): Socket!
  updateTag(updateTagInput: UpdateTagInput!): Tag!
}

type MySetting {
  controlWhoSeesYou: ControlWhoSeesYou!
  controlWhoYouSee: ControlWhoYouSee!
  discovery: DiscoverySettings!
}

input MySettingInput {
  controlWhoSeesYou: ControlWhoSeesYouInput
  controlWhoYouSee: ControlWhoYouSeeInput
  discovery: DiscoverySettingsInput
}

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

type Query {
  confirmMail(token: String!): Boolean!
  conversation(id: Int!): Conversation!
  forgotPassword(email: String!): Boolean!
  loginGoogle: String!
  message(id: Int!): Message!
  refreshToken(refreshToken: String!): JwtPayload!
  socket(id: Int!): Socket!
  tag(id: Int!): Tag!
}

input RegisterInput {
  confirmPassword: String!
  email: String!
  password: String!
}

type Socket {
  """Example field (placeholder)"""
  exampleField: Int!
}

enum StatusActive {
  OFFLINE
  ONLINE
}

type Tag {
  _id: ID!
  createdAt: DateTime!
  isDeleted: Boolean!
  keyword: String!
  name: String
  slug: String!
  updatedAt: DateTime!
}

input UpdateConversationInput {
  id: Int!
  lastMessage: ObjectID
  members: [ObjectID!]
  messagePin: ObjectID
}

input UpdateMessageInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateSocketInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateTagInput {
  id: Int!
  name: String
}

input UpdateUserInput {
  birthDays: DateTime
  gender: GenderEnum
  images: [String!]
  phoneNumber: String
  tags: [ObjectID!]
  username: String
}

type User {
  _id: ID!
  address: Address
  birthDays: DateTime
  createdAt: DateTime
  email: String!
  gender: GenderEnum!
  geoLocation: GeoLocation
  images: [String!]
  isDeleted: Boolean!
  keyword: String
  lastActive: DateTime
  matchRequest: [MatchRequest!]
  matched: [String!]
  mySetting: MySetting!
  phoneNumber: String
  showMeTinder: Boolean!
  slug: String!
  statusActive: StatusActive
  tags: [Tag!]
  updatedAt: DateTime
  username: String!
}